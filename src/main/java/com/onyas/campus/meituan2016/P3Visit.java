package com.onyas.campus.meituan2016;

/***
 * ������һ���������۾��?��Ҫ�ӹ�˾������ȥ�ݷ����ڵ��̼ң���֪���λ���Լ��̼ҵ�λ�ã��������ڳ��е�·��ͨ��ԭ��<br>
 * ��ֻ����������ѡ��һ��������������ѡ��һ���������������ж����ַ��������̼ҵ�ַ��<br>
 * ��һ����ͼmap����ĳ���n��m������1��?��λ�ã�2����̼�λ�ã�-1��?�ܾ���ĵ���0�����Ծ���ĵ���<br>
 * �뷵�ط�����֤һ�����ںϷ�·������֤����ĳ��?С�ڵ���10��<br>
 * ��������<br>
 * [[0,1,0],[2,0,0]],2,3<br>
 * ���أ�2<br>
 * 
 * @author Administrator
 *
 */
public class P3Visit {

	/**
	 * ��dp��� 1.�����ҵ�1��2��λ�ã�����Ҫע��һ�㣬��1�ߵ�2���2�ߵ�1��õ�·������ͬ������1Ϊ������2Ϊ����ǵȼ۵ġ����������Ĵ����ǣ�<br/>
	 * ͳһ�������С��λ���ߵ��������λ�ã��������ߡ�<br/>
	 * 2.1��2�����λ�ÿ��Թ������£�<br/>
	 * ��1������λ�����Խ����� <br/>
	 * ��2������λ�ڸ��Խ�����<br/>
	 * ��3������λ���غϻ���ͬһ�л�ͬһ�У����������ο��Ժϲ�����1����2���У�<br/>
	 * 
	 * @param map
	 * @param n
	 * @param m
	 * @return
	 */
	public int countPath(int[][] map, int n, int m) {
		int x1 = 0, y1 = 0, x2 = 0, y2 = 0;
		// 1�����ȵ�1,2��λ��
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (map[i][j] == 1) {
					x1 = i;
					y1 = j;
				}
				if (map[i][j] == 2) {
					x2 = i;
					y2 = j;
				}
			}
		}

		if (x1 == x2 && y1 == y2) {// �����غ�
			return 1;
		}
		if (x1 > x2) {// x1,y1���ڱ������±�Ľ�С��
			x1 = x1 ^ x2 ^ (x2 = x1);
			y1 = y1 ^ y2 ^ (y2 = y1);
		}

		int dp[][] = new int[n][m];
		if (y1 < y2) {// ���㴦�����Խ�����
			dp[x1][y1] = 1;
			for (int i = x1 + 1; i <= x2; i++) {// ��ʼ��ͬһ�е����
				dp[i][y1] = map[i][y1] == -1 ? 0 : map[i - 1][y1];
			}
			for (int j = y1 + 1; j <= y2; j++) {// ��ʼ��ͬһ�е����
				dp[x1][j] = map[x1][j] == -1 ? 0 : map[x1][j - 1];
			}
			for (int i = x1 + 1; i <= x2; i++) {// dp�Ƶ�����
				for (int j = y1 + 1; j <= y2; j++) {
					dp[i][j] = map[i][j] == -1 ? 0 : dp[i - 1][j]
							+ dp[i][j - 1];
				}
			}
		} else {// ���㴦�ڸ��Խ����ϻ�ͬһ����
			dp[x1][y1] = 1;
			for (int i = x1 + 1; i <= x2; i++) {
				dp[i][y1] = map[i][y1] == -1 ? 0 : map[i - 1][y1];
			}
			for (int j = y1 - 1; j >= y2; j--) {
				dp[x1][j] = map[x1][j] == -1 ? 0 : map[x1][j + 1];
			}
			for (int i = x1 + 1; i <= x2; i++) {
				for (int j = y1 - 1; j >= y2; j--) {
					dp[i][j] = map[i][j] == -1 ? 0 : dp[i - 1][j]
							+ dp[i][j + 1];
				}
			}
		}
		return dp[x2][y2];
	}

	public static void main(String[] args) {

	}

}
